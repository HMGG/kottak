// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8515407082068702383),
      name: 'Song',
      lastPropertyId: const IdUid(9, 3458152661499975822),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8362327105082588148),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(3, 514018395350512271),
            name: 'lyrics',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3389352200374802309),
            name: 'author',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6383800492236208138),
            name: 'originalTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2083304092418123620),
            name: 'translator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7574013117331122127),
            name: 'favorite',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6510663087539802287),
            name: 'sheets',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3458152661499975822),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 6860627137881601898),
            name: 'tags',
            targetId: const IdUid(2, 6295804663967952482))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6295804663967952482),
      name: 'Tag',
      lastPropertyId: const IdUid(3, 1991258975757568043),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2315515640667898963),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6196850640121334747),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1991258975757568043),
            name: 'tagGroupId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1615495047771659028),
            relationTarget: 'TagGroup')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'songs', srcEntity: 'Song', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 6460878282948289241),
      name: 'TagGroup',
      lastPropertyId: const IdUid(3, 1870380263473771029),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8922714251131724356),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2669306583694314511),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1870380263473771029),
            name: 'index',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tags', srcEntity: 'Tag', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 6460878282948289241),
      lastIndexId: const IdUid(1, 1615495047771659028),
      lastRelationId: const IdUid(2, 6860627137881601898),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3288209960121004330],
      retiredRelationUids: const [1708812543145057221],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Song: EntityDefinition<Song>(
        model: _entities[0],
        toOneRelations: (Song object) => [],
        toManyRelations: (Song object) =>
            {RelInfo<Song>.toMany(2, object.id): object.tags},
        getId: (Song object) => object.id,
        setId: (Song object, int id) {
          object.id = id;
        },
        objectToFB: (Song object, fb.Builder fbb) {
          final lyricsOffset = fbb.writeString(object.lyrics);
          final authorOffset = fbb.writeString(object.author);
          final originalTitleOffset = fbb.writeString(object.originalTitle);
          final translatorOffset = fbb.writeString(object.translator);
          final sheetsOffset = fbb.writeList(
              object.sheets.map(fbb.writeString).toList(growable: false));
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, lyricsOffset);
          fbb.addOffset(3, authorOffset);
          fbb.addOffset(4, originalTitleOffset);
          fbb.addOffset(5, translatorOffset);
          fbb.addBool(6, object.favorite);
          fbb.addOffset(7, sheetsOffset);
          fbb.addOffset(8, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Song(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              lyrics: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              author: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              originalTitle: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              translator: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              favorite: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              sheets: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 18, []));
          InternalToManyAccess.setRelInfo(object.tags, store,
              RelInfo<Song>.toMany(2, object.id), store.box<Song>());
          return object;
        }),
    Tag: EntityDefinition<Tag>(
        model: _entities[1],
        toOneRelations: (Tag object) => [object.tagGroup],
        toManyRelations: (Tag object) =>
            {RelInfo<Song>.toManyBacklink(2, object.id): object.songs},
        getId: (Tag object) => object.id,
        setId: (Tag object, int id) {
          object.id = id;
        },
        objectToFB: (Tag object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.tagGroup.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tag(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.tagGroup.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.tagGroup.attach(store);
          InternalToManyAccess.setRelInfo(object.songs, store,
              RelInfo<Song>.toManyBacklink(2, object.id), store.box<Tag>());
          return object;
        }),
    TagGroup: EntityDefinition<TagGroup>(
        model: _entities[2],
        toOneRelations: (TagGroup object) => [],
        toManyRelations: (TagGroup object) => {
              RelInfo<Tag>.toOneBacklink(
                      3, object.id, (Tag srcObject) => srcObject.tagGroup):
                  object.tags
            },
        getId: (TagGroup object) => object.id,
        setId: (TagGroup object, int id) {
          object.id = id;
        },
        objectToFB: (TagGroup object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.index);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TagGroup(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              index:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          InternalToManyAccess.setRelInfo(
              object.tags,
              store,
              RelInfo<Tag>.toOneBacklink(
                  3, object.id, (Tag srcObject) => srcObject.tagGroup),
              store.box<TagGroup>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// see [Song.id]
  static final id = QueryIntegerProperty<Song>(_entities[0].properties[0]);

  /// see [Song.lyrics]
  static final lyrics = QueryStringProperty<Song>(_entities[0].properties[1]);

  /// see [Song.author]
  static final author = QueryStringProperty<Song>(_entities[0].properties[2]);

  /// see [Song.originalTitle]
  static final originalTitle =
      QueryStringProperty<Song>(_entities[0].properties[3]);

  /// see [Song.translator]
  static final translator =
      QueryStringProperty<Song>(_entities[0].properties[4]);

  /// see [Song.favorite]
  static final favorite =
      QueryBooleanProperty<Song>(_entities[0].properties[5]);

  /// see [Song.sheets]
  static final sheets =
      QueryStringVectorProperty<Song>(_entities[0].properties[6]);

  /// see [Song.title]
  static final title = QueryStringProperty<Song>(_entities[0].properties[7]);

  /// see [Song.tags]
  static final tags = QueryRelationToMany<Song, Tag>(_entities[0].relations[0]);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// see [Tag.id]
  static final id = QueryIntegerProperty<Tag>(_entities[1].properties[0]);

  /// see [Tag.name]
  static final name = QueryStringProperty<Tag>(_entities[1].properties[1]);

  /// see [Tag.tagGroup]
  static final tagGroup =
      QueryRelationToOne<Tag, TagGroup>(_entities[1].properties[2]);
}

/// [TagGroup] entity fields to define ObjectBox queries.
class TagGroup_ {
  /// see [TagGroup.id]
  static final id = QueryIntegerProperty<TagGroup>(_entities[2].properties[0]);

  /// see [TagGroup.name]
  static final name = QueryStringProperty<TagGroup>(_entities[2].properties[1]);

  /// see [TagGroup.index]
  static final index =
      QueryIntegerProperty<TagGroup>(_entities[2].properties[2]);
}
